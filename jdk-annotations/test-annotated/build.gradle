plugins {
    id "java-library"
}

dependencies {
    compileOnly deps.apt.autoService
    annotationProcessor deps.apt.autoService
    compileOnly project(":nullaway")
    api deps.build.jspecify
    implementation project(":jdk-annotations:astubx-generator-cli")
}

def pluginJar = "${rootProject.projectDir}/jdk-javac-plugin/build/libs/jdk-javac-plugin-all.jar"
def testInputsPath = "${rootProject.projectDir}/jdk-annotations/test-annotated/src"
def jsonOutputDir = file("${buildDir}/generated/json")
def astubxOutputDir = file("${buildDir}/generated/astubx")

// generate JSON files
task generateNullnessJson {
    group = "build"
    description = "Run NullnessAnnotationSerializer to produce JSON files"

    doFirst {
        jsonOutputDir.mkdirs()
    }

    doLast {
        def sources = fileTree(testInputsPath) {
            include "**/*.java"
        }.files

        if (sources.empty) {
            throw new GradleException("No Java source files found in $testInputsPath")
        }

        def cp = (configurations.compileClasspath.files + file(pluginJar))
                .collect { it.absolutePath }
                .join(File.pathSeparator)

        exec {
            commandLine "javac",
                    "-cp", cp,
                    "-Xplugin:NullnessAnnotationSerializer ${jsonOutputDir.absolutePath}",
            *sources.collect { it.absolutePath }
        }
    }
}

// generate .astubx files from JSON
task generateAstubx(type: JavaExec) {
    group = "build"
    description = "Generate .astubx files from JSON using AstubxGeneratorCLI"

    dependsOn generateNullnessJson

    doFirst {
        if (!jsonOutputDir.exists()) {
            throw new GradleException("JSON directory does not exist: $jsonOutputDir")
        }
        astubxOutputDir.mkdirs()
    }

    mainClass = "com.uber.nullaway.jdkannotations.AstubxGeneratorCLI"
    classpath = sourceSets.main.runtimeClasspath +
            project(":jdk-annotations:astubx-generator-cli").sourceSets.main.runtimeClasspath
    args = [
            jsonOutputDir.absolutePath,
            astubxOutputDir.absolutePath
    ]
}

build.dependsOn(generateAstubx)
generateAstubx.dependsOn(generateNullnessJson)
