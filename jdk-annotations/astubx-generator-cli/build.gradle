plugins {
    id "java-library"
    id "com.gradleup.shadow"
    id 'nullaway.java-test-conventions'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// Allow Java 21 features for this module
tasks.withType(JavaCompile).configureEach {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

jar{
    manifest {
        attributes('Main-Class':'com.uber.nullaway.jdkannotations.AstubxGeneratorCLI')
    }
    // add this classifier so that the output file for the jar task differs from
    // the output file for the shadowJar task (otherwise they overwrite each other's
    // outputs, forcing the tasks to always re-run)
    archiveClassifier = "nonshadow"
}

shadowJar {
    mergeServiceFiles()
    configurations = [
        project.configurations.runtimeClasspath
    ]
    archiveClassifier = ""
}
shadowJar.dependsOn jar
assemble.dependsOn shadowJar

tasks.withType(JavaCompile).configureEach {
    options.release.set(17) // ensures proper bytecode
}

// Don't test on JDK 17; we require JDK 21
tasks.getByName('testJdk17').configure {
    onlyIf { false }
}

tasks.withType(Test).configureEach { test ->
    // Ensure the plugin JAR exists
    dependsOn(":jdk-javac-plugin:shadowJar")

    // Expose a module path for tests as a JVM property.
    def pluginJarTask = project(':jdk-javac-plugin').tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar)
    test.dependsOn pluginJarTask
    test.jvmArgs += [
            "-Dplugin.path=${pluginJarTask.get().archiveFile.get().asFile.absolutePath}"
    ]
}

dependencies {
    implementation project(":library-model:library-model-generator")
    implementation deps.build.gson
    implementation deps.build.guava
//    implementation deps.build.javaparser
//    implementation deps.build.javaparserSymbolSolver
//    compileOnly deps.apt.autoValueAnnot
//    annotationProcessor deps.apt.autoValue

    testImplementation deps.test.junit4
    testImplementation deps.build.jspecify
    testImplementation(deps.build.errorProneTestHelpers) {
        exclude group: "junit", module: "junit"
    }
}
